generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String  @id @default(uuid())
  email           String  @unique
  username        String  @unique
  password        String
  avatar          String
  isAuthenticated Boolean

  sentRequests     FriendRequest[] @relation("Sender")
  receivedRequests FriendRequest[] @relation("Receiver")
  friends          User[]          @relation("Friendship")
  symmetricFriends User[]          @relation("Friendship")

  ChannelsOwner  Channel[] @relation("Owner")
  ChannelsAdmin  Channel[] @relation("Admin")
  ChannelsMember Channel[] @relation("Member")

  sentMessages     Message[] @relation("Sender")
  receivedMessages Message[] @relation("Receiver")
}

model FriendRequest {
  id         String @id @default(uuid())
  sender     User   @relation("Sender", fields: [senderId], references: [id])
  senderId   String
  receiver   User   @relation("Receiver", fields: [receiverId], references: [id])
  receiverId String
  status     Status
}

model Channel {
  id       String      @id @default(uuid())
  name     String
  image    String
  type     ChannelType
  password String
  owner    User        @relation("Owner", fields: [ownerId], references: [id])
  ownerId  String
  admins   User[]      @relation("Admin")
  Members  User[]      @relation("Member")
  Messages Message[]   @relation("channelMessages")
}

model Message {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  body       String
  sender     User     @relation("Sender", fields: [senderId], references: [id])
  senderId   String
  receiver   User?    @relation("Receiver", fields: [receiverId], references: [id])
  receiverId String
  Channel    Channel? @relation("channelMessages", fields: [channelId], references: [id])
  channelId  String?
}

model Game {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
}

enum Status {
  PENDING
  ACCEPTED
  DECLINED
  CANCELED
}

enum ChannelType {
  PUBLIC
  PROTECTED
  PRIVATE
}
