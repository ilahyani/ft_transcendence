generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(uuid())
  email         String     @unique
  username      String     @unique
  password      String
  avatar        String
  gameTheme     GameTheme  @default(Retro)
  TFAenabled    Boolean    @default(false)
  TFAtempSecret String?
  TFAsecret     String?
  status        userStatus @default(OFFLINE)

  isAuthenticated Boolean
  wins            Int     @default(0)
  loses           Int     @default(0)

  sentRequests            FriendRequest[] @relation("Sender")
  receivedRequests        FriendRequest[] @relation("Receiver")
  friends                 User[]          @relation("Friendship")
  symmetricFriends        User[]          @relation("Friendship")
  blockedUsers            User[]          @relation("blocked")
  symmetricBlockedUsers   User[]          @relation("blocked")
  blockedByUsers          User[]          @relation("blockedBy")
  symmetricBlockedByUsers User[]          @relation("blockedBy")

  ChannelsOwner      Channel[] @relation("Owner")
  ChannelsAdmin      Channel[] @relation("Admin")
  ChannelsMember     Channel[] @relation("Member")
  ChannelsBannedFrom Channel[] @relation("Banned")

  startedChats Chat[] @relation("started")
  invitedChats Chat[] @relation("invited")

  Playerat   Game[] @relation("player")
  Opponentat Game[] @relation("opponent")

  sentNotifications     Notification[] @relation("sender")
  receivedNotifications Notification[] @relation("receiver")

  sentMessages      Message[]           @relation("Sender")
  receivedMessages  Message[]           @relation("Receiver")
  achievements      Achievement?
  mutedChannelUsers mutedChannelUsers[]
}

model FriendRequest {
  id         String @id @default(uuid())
  sender     User   @relation("Sender", fields: [senderId], references: [id])
  senderId   String
  receiver   User   @relation("Receiver", fields: [receiverId], references: [id])
  receiverId String
  status     Status
}

model Channel {
  id            String              @id @default(uuid())
  name          String
  image         String
  type          ChannelType
  password      String?
  owner         User                @relation("Owner", fields: [ownerId], references: [id])
  ownerId       String
  admins        User[]              @relation("Admin")
  Members       User[]              @relation("Member")
  bannedMembers User[]              @relation("Banned")
  Messages      Message[]           @relation("channelMessages")
  mutedMembers  mutedChannelUsers[] @relation("mute")
}

model mutedChannelUsers {
  id       String    @id @default(uuid())
  user     User      @relation(fields: [userId], references: [id])
  userId   String
  channels Channel[] @relation("mute")
  time     String
}

model Chat {
  id        String    @id @default(uuid())
  // users    User[]
  myself    User      @relation("started", fields: [user1Id], references: [id])
  user1Id   String
  myfriend  User      @relation("invited", fields: [user2Id], references: [id])
  user2Id   String
  isBlocked Boolean   @default(false)
  messages  Message[]
}

model Message {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  body       String
  sender     User     @relation("Sender", fields: [senderId], references: [id])
  senderId   String
  receiver   User?    @relation("Receiver", fields: [receiverId], references: [id])
  receiverId String?
  Channel    Channel? @relation("channelMessages", fields: [channelId], references: [id])
  channelId  String?
  Chat       Chat?    @relation(fields: [chatId], references: [id])
  chatId     String?
  delivered  Boolean  @default(false)
}

model Game {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  Player        User     @relation("player", fields: [playerId], references: [id])
  Opponent      User     @relation("opponent", fields: [opponentId], references: [id])
  playerId      String
  opponentId    String
  type          GameType
  playerScore   Int      @default(0)
  opponentScore Int      @default(0)
}

model Achievement {
  achievementId String  @id @default(uuid())
  player        User    @relation(fields: [playerId], references: [id])
  playerId      String  @unique
  freshman      Boolean @default(true)
  snowdedn      Boolean @default(true)
  NewHero       Boolean @default(false)
  Rak3ajbni     Boolean @default(false)
  Sbe3          Boolean @default(false)
  a9wedPonger   Boolean @default(false)
  GetAlifeBro   Boolean @default(false)
}

model Notification {
  id         String           @id @default(uuid())
  createdAt  DateTime         @default(now())
  type       NotificationType
  sender     User             @relation("sender", fields: [senderId], references: [id])
  senderId   String
  receiver   User             @relation("receiver", fields: [receiverId], references: [id])
  receiverId String
  delivered  Boolean          @default(false)
  read       Boolean          @default(false)
  message    String
}

enum Status {
  PENDING
  ACCEPTED
  DECLINED
  CANCELED
}

enum userStatus {
  ONLINE
  OFFLINE
  PLAYING
}

enum GameType {
  RandomMatch
  FriendMatch
}

enum GameTheme {
  Retro
  Blue
  Gray
}

enum NotificationType {
  FriendRequest
  GameRequest
  Acheivement
  Message
  Block
  unBlock
  Channel
}

enum ChannelType {
  PUBLIC
  PROTECTED
  PRIVATE
}
