generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"] // yahya added this 
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(uuid())
  email    String @unique
  username String @unique
  password String
  avatar   String
  socketId String

  isAuthenticated Boolean

  sentRequests     FriendRequest[] @relation("Sender")
  receivedRequests FriendRequest[] @relation("Receiver")
  friends          User[]          @relation("Friendship")
  symmetricFriends User[]          @relation("Friendship")
  ChannelsOwner    Channel[]       @relation("Owner")
  Playerat         Game[] 		@relation("player")
  Opponentat       Game[] 		@relation("opponent")
  // ChannelsAdmin  Channel[] @relation("Admin")
  // ChannelsMember Channel[] @relation("Member")
}

model FriendRequest {
  id         String @id @default(uuid())
  sender     User   @relation("Sender", fields: [senderId], references: [id])
  senderId   String
  receiver   User   @relation("Receiver", fields: [receiverId], references: [id])
  receiverId String
  status     Status
}

model Channel {
  id      String @id @default(uuid())
  name    String
  image   String
  owner   User   @relation("Owner", fields: [ownerId], references: [id])
  ownerId String @unique
  // admins  User[] @relation("Admin")
  // Members User[] @relation("Member")
}

model Message {
  id       String   @id @default(uuid())
  sentTime DateTime @default(now())
  body     String
}

model Game {
  id        String     @id @default(uuid())
  createdAt DateTime   @default(now())

  Player   User @relation("player", fields: [playerId], references: [id])
  Opponent User @relation("opponent",fields: [opponentId], references: [id])
  playerId  String
  opponentId String
  type      GameType
  playerScore Int @default(0)
  opponentScore Int @default(0)
}

enum Status {
  PENDING
  ACCEPTED
  DECLINED
  CANCELED
}

enum GameType {
  RandomMatch
  FriendMatch
}

// 4f -> 9d -> 70 -> 8d